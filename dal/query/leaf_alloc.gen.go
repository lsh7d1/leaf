// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"leaf/dal/model"
)

func newLeafAlloc(db *gorm.DB, opts ...gen.DOOption) leafAlloc {
	_leafAlloc := leafAlloc{}

	_leafAlloc.leafAllocDo.UseDB(db, opts...)
	_leafAlloc.leafAllocDo.UseModel(&model.LeafAlloc{})

	tableName := _leafAlloc.leafAllocDo.TableName()
	_leafAlloc.ALL = field.NewAsterisk(tableName)
	_leafAlloc.BizTag = field.NewString(tableName, "biz_tag")
	_leafAlloc.MaxID = field.NewInt64(tableName, "max_id")
	_leafAlloc.Step = field.NewInt64(tableName, "step")
	_leafAlloc.Description = field.NewString(tableName, "description")
	_leafAlloc.UpdateTime = field.NewTime(tableName, "update_time")

	_leafAlloc.fillFieldMap()

	return _leafAlloc
}

type leafAlloc struct {
	leafAllocDo leafAllocDo

	ALL         field.Asterisk
	BizTag      field.String
	MaxID       field.Int64
	Step        field.Int64
	Description field.String
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (l leafAlloc) Table(newTableName string) *leafAlloc {
	l.leafAllocDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l leafAlloc) As(alias string) *leafAlloc {
	l.leafAllocDo.DO = *(l.leafAllocDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *leafAlloc) updateTableName(table string) *leafAlloc {
	l.ALL = field.NewAsterisk(table)
	l.BizTag = field.NewString(table, "biz_tag")
	l.MaxID = field.NewInt64(table, "max_id")
	l.Step = field.NewInt64(table, "step")
	l.Description = field.NewString(table, "description")
	l.UpdateTime = field.NewTime(table, "update_time")

	l.fillFieldMap()

	return l
}

func (l *leafAlloc) WithContext(ctx context.Context) ILeafAllocDo {
	return l.leafAllocDo.WithContext(ctx)
}

func (l leafAlloc) TableName() string { return l.leafAllocDo.TableName() }

func (l leafAlloc) Alias() string { return l.leafAllocDo.Alias() }

func (l leafAlloc) Columns(cols ...field.Expr) gen.Columns { return l.leafAllocDo.Columns(cols...) }

func (l *leafAlloc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *leafAlloc) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["biz_tag"] = l.BizTag
	l.fieldMap["max_id"] = l.MaxID
	l.fieldMap["step"] = l.Step
	l.fieldMap["description"] = l.Description
	l.fieldMap["update_time"] = l.UpdateTime
}

func (l leafAlloc) clone(db *gorm.DB) leafAlloc {
	l.leafAllocDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l leafAlloc) replaceDB(db *gorm.DB) leafAlloc {
	l.leafAllocDo.ReplaceDB(db)
	return l
}

type leafAllocDo struct{ gen.DO }

type ILeafAllocDo interface {
	gen.SubQuery
	Debug() ILeafAllocDo
	WithContext(ctx context.Context) ILeafAllocDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILeafAllocDo
	WriteDB() ILeafAllocDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILeafAllocDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILeafAllocDo
	Not(conds ...gen.Condition) ILeafAllocDo
	Or(conds ...gen.Condition) ILeafAllocDo
	Select(conds ...field.Expr) ILeafAllocDo
	Where(conds ...gen.Condition) ILeafAllocDo
	Order(conds ...field.Expr) ILeafAllocDo
	Distinct(cols ...field.Expr) ILeafAllocDo
	Omit(cols ...field.Expr) ILeafAllocDo
	Join(table schema.Tabler, on ...field.Expr) ILeafAllocDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILeafAllocDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILeafAllocDo
	Group(cols ...field.Expr) ILeafAllocDo
	Having(conds ...gen.Condition) ILeafAllocDo
	Limit(limit int) ILeafAllocDo
	Offset(offset int) ILeafAllocDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILeafAllocDo
	Unscoped() ILeafAllocDo
	Create(values ...*model.LeafAlloc) error
	CreateInBatches(values []*model.LeafAlloc, batchSize int) error
	Save(values ...*model.LeafAlloc) error
	First() (*model.LeafAlloc, error)
	Take() (*model.LeafAlloc, error)
	Last() (*model.LeafAlloc, error)
	Find() ([]*model.LeafAlloc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LeafAlloc, err error)
	FindInBatches(result *[]*model.LeafAlloc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LeafAlloc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILeafAllocDo
	Assign(attrs ...field.AssignExpr) ILeafAllocDo
	Joins(fields ...field.RelationField) ILeafAllocDo
	Preload(fields ...field.RelationField) ILeafAllocDo
	FirstOrInit() (*model.LeafAlloc, error)
	FirstOrCreate() (*model.LeafAlloc, error)
	FindByPage(offset int, limit int) (result []*model.LeafAlloc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILeafAllocDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l leafAllocDo) Debug() ILeafAllocDo {
	return l.withDO(l.DO.Debug())
}

func (l leafAllocDo) WithContext(ctx context.Context) ILeafAllocDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l leafAllocDo) ReadDB() ILeafAllocDo {
	return l.Clauses(dbresolver.Read)
}

func (l leafAllocDo) WriteDB() ILeafAllocDo {
	return l.Clauses(dbresolver.Write)
}

func (l leafAllocDo) Session(config *gorm.Session) ILeafAllocDo {
	return l.withDO(l.DO.Session(config))
}

func (l leafAllocDo) Clauses(conds ...clause.Expression) ILeafAllocDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l leafAllocDo) Returning(value interface{}, columns ...string) ILeafAllocDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l leafAllocDo) Not(conds ...gen.Condition) ILeafAllocDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l leafAllocDo) Or(conds ...gen.Condition) ILeafAllocDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l leafAllocDo) Select(conds ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l leafAllocDo) Where(conds ...gen.Condition) ILeafAllocDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l leafAllocDo) Order(conds ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l leafAllocDo) Distinct(cols ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l leafAllocDo) Omit(cols ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l leafAllocDo) Join(table schema.Tabler, on ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l leafAllocDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l leafAllocDo) RightJoin(table schema.Tabler, on ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l leafAllocDo) Group(cols ...field.Expr) ILeafAllocDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l leafAllocDo) Having(conds ...gen.Condition) ILeafAllocDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l leafAllocDo) Limit(limit int) ILeafAllocDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l leafAllocDo) Offset(offset int) ILeafAllocDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l leafAllocDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILeafAllocDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l leafAllocDo) Unscoped() ILeafAllocDo {
	return l.withDO(l.DO.Unscoped())
}

func (l leafAllocDo) Create(values ...*model.LeafAlloc) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l leafAllocDo) CreateInBatches(values []*model.LeafAlloc, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l leafAllocDo) Save(values ...*model.LeafAlloc) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l leafAllocDo) First() (*model.LeafAlloc, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LeafAlloc), nil
	}
}

func (l leafAllocDo) Take() (*model.LeafAlloc, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LeafAlloc), nil
	}
}

func (l leafAllocDo) Last() (*model.LeafAlloc, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LeafAlloc), nil
	}
}

func (l leafAllocDo) Find() ([]*model.LeafAlloc, error) {
	result, err := l.DO.Find()
	return result.([]*model.LeafAlloc), err
}

func (l leafAllocDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LeafAlloc, err error) {
	buf := make([]*model.LeafAlloc, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l leafAllocDo) FindInBatches(result *[]*model.LeafAlloc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l leafAllocDo) Attrs(attrs ...field.AssignExpr) ILeafAllocDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l leafAllocDo) Assign(attrs ...field.AssignExpr) ILeafAllocDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l leafAllocDo) Joins(fields ...field.RelationField) ILeafAllocDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l leafAllocDo) Preload(fields ...field.RelationField) ILeafAllocDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l leafAllocDo) FirstOrInit() (*model.LeafAlloc, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LeafAlloc), nil
	}
}

func (l leafAllocDo) FirstOrCreate() (*model.LeafAlloc, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LeafAlloc), nil
	}
}

func (l leafAllocDo) FindByPage(offset int, limit int) (result []*model.LeafAlloc, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l leafAllocDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l leafAllocDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l leafAllocDo) Delete(models ...*model.LeafAlloc) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *leafAllocDo) withDO(do gen.Dao) *leafAllocDo {
	l.DO = *do.(*gen.DO)
	return l
}
